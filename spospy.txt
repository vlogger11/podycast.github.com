#macropass1.py

def process_macros(input_file, output_files):
    ala, flag, mdpt = [], 0, 1

    with open(input_file, "r") as f:
        lines = f.readlines()

    mnt, mdt, ic = output_files

    for line in lines:
        l = line.strip()
        if l == "MACRO":
            flag = 1
        elif l == "MEND":
            flag = 0
        elif flag == 1:
            mdt.write(f"{l}\n")
            temp = l.split()
            mnt.write(f"{temp[0]} {mdpt}\n")
            ala = temp[1].split(",")
        elif flag > 1:
            temp = l.split()
            part2 = temp[1].split(",")
            mdt.write(f"{temp[0]} {' '.join([f'#{ala.index(i)},' for i in part2])}\n")
        else:
            ic.write(line)

input_file = "Input.txt"
output_files = (
    open("MNT.txt", "w"),
    open("MDT.txt", "w"),
    open("IC.txt", "w")
)

process_macros(input_file, output_files)

for f in output_files:
    f.close()

############



//fcfs scheduling py
/////1
def fcfs_scheduling(processes, burst_time):
    n = len(processes)
    waiting_time = [0] * n
    turnaround_time = [0] * n

    waiting_time[0] = 0

    for i in range(1, n):
        waiting_time[i] = burst_time[i - 1] + waiting_time[i - 1]

    for i in range(n):
        turnaround_time[i] = burst_time[i] + waiting_time[i]

    print("Process\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"P{i}\t{burst_time[i]}\t\t{waiting_time[i]}\t\t{turnaround_time[i]}")

if __name__ == "__main__":
    processes = [0, 1, 2, 3]  # Process IDs
    burst_time = [10, 6, 8, 7]  # Burst time for each process

    fcfs_scheduling(processes, burst_time)

////2

def find_waiting_time(processes, n, bt, wt):
    wt[0] = 0

    for i in range(1, n):
        wt[i] = bt[i - 1] + wt[i - 1]

def find_turnaround_time(processes, n, bt, wt, tat):
    for i in range(n):
        tat[i] = bt[i] + wt[i]

def find_average_times(processes, n, bt):
    wt = [0] * n
    tat = [0] * n

    find_waiting_time(processes, n, bt, wt)
    find_turnaround_time(processes, n, bt, wt, tat)

    total_wt = sum(wt)
    total_tat = sum(tat)

    avg_wt = total_wt / n
    avg_tat = total_tat / n

    return avg_wt, avg_tat

def main():
    n = int(input("Enter the number of processes: "))
    processes = list(range(1, n + 1))

    burst_time = []
    for i in range(n):
        bt = int(input(f"Enter the burst time for Process {i + 1}: "))
        burst_time.append(bt)

    avg_wt, avg_tat = find_average_times(processes, n, burst_time)

    print("Process\tBurst Time\tWaiting Time\tTurnaround Time")
    for i in range(n):
        print(f"P{i + 1}\t\t{burst_time[i]}\t\t{wt[i]}\t\t{tat[i]}")

    print(f"Average Waiting Time: {avg_wt}")
    print(f"Average Turnaround Time: {avg_tat}")

if __name__ == "__main__":
    main()

/////SJF

def sjf_scheduling(processes):
    # Sort the processes by arrival time and burst time
    processes.sort(key=lambda x: (x["arrival_time"], x["burst_time"]))

    # Initialize the total waiting time and turnaround time
    total_waiting_time = 0
    total_turnaround_time = 0

    # Initialize the current time
    current_time = 0

    # Process the sorted processes
    for process in processes:
        if process["arrival_time"] > current_time:
            # If the process hasn't arrived yet, wait for it
            current_time = process["arrival_time"]
        # Update waiting time for the current process
        process["waiting_time"] = current_time
        # Update the current time
        current_time += process["burst_time"]
        # Update turnaround time for the current process
        process["turnaround_time"] = current_time
        # Update total waiting and turnaround time
        total_waiting_time += process["waiting_time"]
        total_turnaround_time += process["turnaround_time"]

    # Calculate average waiting and turnaround time
    avg_waiting_time = total_waiting_time / len(processes)
    avg_turnaround_time = total_turnaround_time / len(processes)

    # Print the scheduling results
    print("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time")
    for process in processes:
        print(f"{process['name']}\t{process['arrival_time']}\t{process['burst_time']}\t{process['waiting_time']}\t{process['turnaround_time']}")
    print(f"Average Waiting Time: {avg_waiting_time}")
    print(f"Average Turnaround Time: {avg_turnaround_time}")

if __name__ == "__main__":
    # Example processes
    processes = [
        {"name": "P1", "arrival_time": 0, "burst_time": 6},
        {"name": "P2", "arrival_time": 1, "burst_time": 8},
        {"name": "P3", "arrival_time": 2, "burst_time": 7},
        {"name": "P4", "arrival_time": 3, "burst_time": 3},
    ]

    sjf_scheduling(processes)


/////RR

def round_robin(processes, burst_time, time_quantum):
    n = len(processes)
    remaining_time = list(burst_time)  # Copy burst_time to a list

    total_time = 0  # Total time elapsed
    queue = []  # A queue to store the processes

    while True:
        all_completed = True  # Assume all processes are completed
        for i in range(n):
            if remaining_time[i] > 0:
                all_completed = False  # There are still processes to be executed
                if remaining_time[i] <= time_quantum:
                    total_time += remaining_time[i]
                    queue.append(processes[i])
                    print(f"Process {processes[i]} executed for {remaining_time[i]} units.")
                    remaining_time[i] = 0
                else:
                    total_time += time_quantum
                    queue.append(processes[i])
                    print(f"Process {processes[i]} executed for {time_quantum} units.")
                    remaining_time[i] -= time_quantum

        if all_completed:
            break

    print(f"Average turnaround time: {total_time / n:.2f}")
    print(f"Average waiting time: {total_time / n - sum(burst_time) / n:.2f}")


if __name__ == "__main__":
    processes = [1, 2, 3, 4]
    burst_time = [10, 5, 8, 12]
    time_quantum = 2

    round_robin(processes, burst_time, time_quantum)

/////priority scheduling

class Process:
    def __init__(self, name, priority, burst_time):
        self.name = name
        self.priority = priority
        self.burst_time = burst_time

def priority_scheduling(processes):
    n = len(processes)
    
    # Sort processes based on priority (lower value means higher priority)
    processes.sort(key=lambda x: x.priority)
    
    total_time = 0
    waiting_time = 0
    
    print("Process\tPriority\tBurst Time\tWaiting Time")
    for process in processes:
        print(f"{process.name}\t{process.priority}\t\t{process.burst_time}\t\t{waiting_time}")
        total_time += waiting_time + process.burst_time
        waiting_time += process.burst_time
    
    average_waiting_time = waiting_time / n
    print(f"\nAverage Waiting Time: {average_waiting_time:.2f}")
    print(f"Total Execution Time: {total_time}")

if __name__ == "__main__":
    processes = [
        Process("P1", 2, 5),
        Process("P2", 1, 3),
        Process("P3", 3, 7),
        Process("P4", 4, 2),
    ]

    priority_scheduling(processes)

////FIFO pg replacement

def fifo_page_replacement(pages, capacity):
    frame = []  # Represents the frames in memory
    page_faults = 0  # Counter for page faults
    page_hits = 0  # Counter for page hits

    for page in pages:
        if page not in frame:
            if len(frame) < capacity:
                frame.append(page)
            else:
                frame.pop(0)
                frame.append(page)
            page_faults += 1
        else:
            page_hits += 1

    return page_faults, page_hits

if __name__ == "__main__":
    # Input the list of pages and the number of frames in memory
    pages = [1, 3, 0, 3, 5, 6, 3]
    capacity = 3

    page_faults, page_hits = fifo_page_replacement(pages, capacity)

    page_count = len(pages)
    hit_ratio = page_hits / page_count
    fault_ratio = page_faults / page_count

    print("Page Faults:", page_faults)
    print("Page Hits:", page_hits)
    print("Page Hit Ratio: {:.2f}%".format(hit_ratio * 100))
    print("Page Fault Ratio: {:.2f}%".format(fault_ratio * 100))


/////LRU

from collections import OrderedDict

def lru_page_replacement(pages, capacity):
    frame = OrderedDict()  # Represents the frames in memory as an ordered dictionary
    page_faults = 0  # Counter for page faults
    hit_count = 0  # Counter for page hits

    for page in pages:
        if page in frame:
            # If the page is already in memory, move it to the end (most recently used)
            frame.move_to_end(page)
            hit_count += 1
        else:
            if len(frame) >= capacity:
                # If memory is full, remove the least recently used page
                frame.popitem(last=False)
            frame[page] = None  # Add the new page to memory
            page_faults += 1

    return page_faults, hit_count

if __name__ == "__main__":
    # Input the list of pages and the number of frames in memory
    pages = [1, 3, 0, 3, 5, 6, 3]
    capacity = 3

    page_faults, hit_count = lru_page_replacement(pages, capacity)

    print("Page faults using LRU:", page_faults)
    total_requests = len(pages)
    hit_ratio = hit_count / total_requests
    print(f"Hit ratio: {hit_ratio:.2f}")


////OPTIMAL

def optimal_page_replacement(pages, capacity):
    frame = []  # Represents the frames in memory
    page_faults = 0  # Counter for page faults
    page_hits = 0  # Counter for page hits

    for page in pages:
        if page not in frame:
            if len(frame) < capacity:
                frame.append(page)
            else:
                # Find the page in memory that won't be used for the longest time
                future_indices = []
                for f in frame:
                    if f in pages[pages.index(page):]:
                        future_indices.append(pages.index(page) + pages[pages.index(page):].index(f))
                    else:
                        future_indices.append(len(pages))

                page_to_replace = frame[future_indices.index(max(future_indices))]
                frame[frame.index(page_to_replace)] = page
            page_faults += 1
        else:
            page_hits += 1

    return page_faults, page_hits

if __name__ == "__main__":
    # Input the list of pages and the number of frames in memory
    pages = [1, 2, 3, 4, 1, 2, 5, 1, 2, 3, 4, 5]
    capacity = 3

    page_faults, page_hits = optimal_page_replacement(pages, capacity)

    print("Page faults using OPTIMAL:", page_faults)
    print("Page hits using OPTIMAL:", page_hits)
    hit_ratio = page_hits / len(pages)
    fault_ratio = page_faults / len(pages)
    print("Hit Ratio:", hit_ratio)
    print("Fault Ratio:", fault_ratio)


